
ATtiny104 Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  000000c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000498  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000042a  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001df  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0f c0       	rjmp	.+30     	; 0x20 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>
  14:	0d c0       	rjmp	.+26     	; 0x30 <__bad_interrupt>
  16:	0c c0       	rjmp	.+24     	; 0x30 <__bad_interrupt>
  18:	0b c0       	rjmp	.+22     	; 0x30 <__bad_interrupt>
  1a:	0a c0       	rjmp	.+20     	; 0x30 <__bad_interrupt>
  1c:	09 c0       	rjmp	.+18     	; 0x30 <__bad_interrupt>
  1e:	08 c0       	rjmp	.+16     	; 0x30 <__bad_interrupt>

00000020 <__ctors_end>:
  20:	11 27       	eor	r17, r17
  22:	1f bf       	out	0x3f, r17	; 63
  24:	cf e5       	ldi	r28, 0x5F	; 95
  26:	d0 e0       	ldi	r29, 0x00	; 0
  28:	de bf       	out	0x3e, r29	; 62
  2a:	cd bf       	out	0x3d, r28	; 61
  2c:	02 d0       	rcall	.+4      	; 0x32 <main>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <main>:

int main() {
	
	uint8_t timerOverflowCount=0;
	// Configure PORTA as output
	DDRA = 0xff;
  32:	4f ef       	ldi	r20, 0xFF	; 255
  34:	41 b9       	out	0x01, r20	; 1
	// Load timer counter with 0
	TCNT0 = 0x00;
  36:	19 bd       	out	0x29, r17	; 41
  38:	18 bd       	out	0x28, r17	; 40
	// Set CS00 and CS02 bits in TCCR0B
	TCCR0B = (1 << CS00) | (1 << CS02);
  3a:	45 e0       	ldi	r20, 0x05	; 5
  3c:	4d bd       	out	0x2d, r20	; 45
	// TCCR0B = TCCR0B | ((1 << 3) | (1 << 4));
	TIFR0 = 0x01;
  3e:	41 e0       	ldi	r20, 0x01	; 1
  40:	4a bd       	out	0x2a, r20	; 42
#include<avr/io.h>
#define LED PA5

int main() {
	
	uint8_t timerOverflowCount=0;
  42:	50 e0       	ldi	r21, 0x00	; 0
	TCCR0B = (1 << CS00) | (1 << CS02);
	// TCCR0B = TCCR0B | ((1 << 3) | (1 << 4));
	TIFR0 = 0x01;
	while (1) {
		// DDRA = 0xff;
		while ((TIFR0 && 0x01) == 0) { DDRA = 0xff; }
  44:	4a b5       	in	r20, 0x2a	; 42
  46:	41 13       	cpse	r20, r17
  48:	03 c0       	rjmp	.+6      	; 0x50 <__SREG__+0x11>
  4a:	4f ef       	ldi	r20, 0xFF	; 255
  4c:	41 b9       	out	0x01, r20	; 1
  4e:	fa cf       	rjmp	.-12     	; 0x44 <__SREG__+0x5>
	    // PORTA ^= (0x01 << LED);
		TCNT0 = 0x00;
  50:	19 bd       	out	0x29, r17	; 41
  52:	18 bd       	out	0x28, r17	; 40
		TIFR0 = 0x01; //clear timer0 overflow flag
  54:	41 e0       	ldi	r20, 0x01	; 1
  56:	4a bd       	out	0x2a, r20	; 42
		timerOverflowCount++;
  58:	5f 5f       	subi	r21, 0xFF	; 255
		if (timerOverflowCount >= 60) {
  5a:	5c 33       	cpi	r21, 0x3C	; 60
  5c:	98 f3       	brcs	.-26     	; 0x44 <__SREG__+0x5>
			PORTA ^= (0x01 << LED);
  5e:	52 b1       	in	r21, 0x02	; 2
  60:	40 e2       	ldi	r20, 0x20	; 32
  62:	45 27       	eor	r20, r21
  64:	42 b9       	out	0x02, r20	; 2
			timerOverflowCount = 0;
  66:	50 e0       	ldi	r21, 0x00	; 0
  68:	ed cf       	rjmp	.-38     	; 0x44 <__SREG__+0x5>

0000006a <_exit>:
  6a:	f8 94       	cli

0000006c <__stop_program>:
  6c:	ff cf       	rjmp	.-2      	; 0x6c <__stop_program>
